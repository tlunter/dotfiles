" load the plugin and indent settings for the detected filetype
set nocompatible
filetype off

" First turn on Vundle
call plug#begin('~/.vim/plugged')

Plug 'flazz/vim-colorschemes'

Plug 'neoclide/coc.nvim', {'branch': 'release'}

Plug 'tpope/vim-fugitive'
Plug 'airblade/vim-gitgutter'
Plug 'Shougo/vimproc.vim', {'do' : 'make'}
Plug 'bling/vim-airline'
Plug 'tpope/vim-dispatch'
Plug 'tpope/vim-surround'
Plug 'luochen1990/rainbow'
Plug 'tpope/vim-rsi'
Plug 'junegunn/goyo.vim'
Plug 'rking/ag.vim'

Plug 'tpope/vim-rails'
Plug 'tpope/vim-rhubarb'
Plug 'tpope/vim-markdown'
Plug 'groenewege/vim-less'
Plug 'eagletmt/ghcmod-vim'
Plug 'ElmCast/elm-vim'
Plug 'fatih/vim-go'
Plug 'ekalinin/Dockerfile.vim'
Plug 'pangloss/vim-javascript'
Plug 'HerringtonDarkholme/yats.vim'
Plug 'maxmellon/vim-jsx-pretty'

Plug 'scrooloose/nerdtree', { 'on': 'NERDTreeToggle' }

Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'

Plug 'tweekmonster/startuptime.vim'

call plug#end()

runtime macros/matchit.vim

set shell=/bin/sh

" load the plugin and indent settings for the detected filetype
filetype plugin indent on
syntax on
set ruler
set showcmd
set showmode
set hidden

" Line numbering
set number

" Whitespace stuff
set nowrap
set autoindent
set smartindent
set smarttab
set tabstop=4
set shiftwidth=4
set softtabstop=4
set linespace=2
set expandtab

" Undo stuff
set undodir=~/.vim/backup
set undofile

set noswapfile

" Searching
set hlsearch
set incsearch
set ignorecase
set smartcase
nmap <C-L> :Buffers<CR>
nmap <C-P> :Files<CR>

" Status bar
set laststatus=2
let g:airline_powerline_fonts = 1
let g:airline#extensions#tabline#enabled = 1

" Color scheme
if has('gui_running')
    let os=substitute(system('uname'), '\n', '', '')
    if os == "Darwin"
        set guifont=Inconsolata-dz:h14
    else
        set guifont=DejaVu\ Sans\ Mono\ 14
    endif
else
    set t_Co=256
endif
set background=dark
colorscheme hojberg

" make uses real tabs
au FileType make set noexpandtab

" Thorfile, Rakefile, Vagrantfile and Gemfile are Ruby
au BufRead,BufNewFile {Gemfile,Rakefile,Vagrantfile,Thorfile,Fastfile,config.ru} set filetype=ruby

" add haskell syntax highlighting
au BufRead,BufNewFile *.hsc  set filetype=haskell

" add zsh syntax highlighting
au BufRead,BufNewFile *.zsh* set filetype=zsh

" add racket syntax highlighting
au BufRead,BufNewFile *.rkt,*.rktl set filetype=racket
au FileType racket set lisp
au FileType racket set autoindent
au FileType racket set lispwords+=public-method,override-method,private-method,syntax-case,syntax-rules
au FileType mkd set wrap linebreak
au FileType mkd setlocal nofoldenable
au FileType markdown set wrap linebreak
au FileType markdown setlocal nofoldenable

" make Python follow PEP8 ( http://www.python.org/dev/peps/pep-0008/ )
au FileType python  set softtabstop=4 tabstop=4 shiftwidth=4

" make HTML use 2 spaces
au BufRead,BufNewFile *.erb set filetype=html
au FileType html    set softtabstop=2 tabstop=2 shiftwidth=2

" make JS use 2 spaces
au FileType javascript set softtabstop=2 tabstop=2 shiftwidth=2
au FileType typescript set softtabstop=2 tabstop=2 shiftwidth=2

" make LESS use 2 spaces
au FileType less    set softtabstop=2 tabstop=2 shiftwidth=2

" make Ruby use 2 spaces
au FileType ruby    set softtabstop=2 tabstop=2 shiftwidth=2

au BufRead,BufNewFile *.yml.erb set filetype=yaml
au BufRead,BufNewFile *.sh.erb set filetype=sh
au BufNewFile,BufRead *.mod  set filetype=ampl
au BufNewFile,BufRead *.dat  set filetype=ampl
au BufNewFile,BufRead *.ampl set filetype=ampl

" allow backspacing over everything in insert mode
set backspace=indent,eol,start
" Copy from and paste to the system clipboard
set clipboard=unnamed

" Completion list
set wildmode=longest,list:longest
set wildmenu                "enable ctrl-n and ctrl-p to scroll thru matches
set wildignore=*.o,*.obj,*~ "stuff to ignore when tab completing
set wildignore+=*vim/backups*
set wildignore+=*sass-cache*
set wildignore+=*DS_Store*
set wildignore+=vendor/rails/**
set wildignore+=vendor/cache/**
set wildignore+=*.gem
set wildignore+=log/**
set wildignore+=tmp/**
set wildignore+=*.png,*.jpg,*.gif
set complete=.,b,u,]

" Don't like using shift or \
noremap ; :
let mapleader=','

" vimrc mappings
map <Leader>ve :e ~/.vimrc
map <Leader>rv :source ~/.vimrc

" A work around when vim isn't open with sudo
map <Leader>ws :w !sudo tee %

" Cancel highlighting by hitting enter
noremap <CR> :noh<CR><CR>

" Quicker vim redraw
inoremap <Leader>re <Esc>:redraw!

" No annoying noises
set noerrorbells visualbell t_vb=

" Enable mouse
set mouse=a

set encoding=utf8

" Scroll offset
set scrolloff=10

" Highlight extraneous whitespace
autocmd BufWinEnter * match Error /\s\+$/
autocmd InsertEnter * match Error /\s\+\%#\@<!$/
autocmd InsertLeave * match Error /\s\+$/
autocmd BufWinLeave * call clearmatches()

" Escape easier with jk
imap jk <Esc>

" Opens NerdTree
map <Leader>nt :NERDTreeToggle<CR>

" 256 colors with tmux
" set term=screen-256color

" Use system ruby for neovim
let g:ruby_host_prog = '/usr/local/bin/neovim-ruby-host'

" Markdown languages for fenced blocks
let g:markdown_fenced_languages = ['css', 'erb=eruby', 'javascript', 'js=javascript', 'json=javascript', 'ruby', 'sass', 'xml', 'html']

" ghcmod-vim specific
autocmd BufWritePost *.hs GhcModCheckAndLintAsync

" Rainbow parens
let g:rainbow_active = 1
let g:rainbow_conf = {
\   'guifgs': ['royalblue3', 'darkorange3', 'seagreen3', 'firebrick'],
\   'ctermfgs': ['red', 'blue', 'yellow', 'green'],
\   'operators': '_,_',
\   'parentheses': ['start=/(/ end=/)/ fold', 'start=/\[/ end=/\]/ fold', 'start=/{/ end=/}/ fold'],
\   'separately': {
\       '*': {},
\       'tex': {
\           'parentheses': ['start=/(/ end=/)/', 'start=/\[/ end=/\]/'],
\       },
\       'lisp': {
\           'guifgs': ['royalblue3', 'darkorange3', 'seagreen3', 'firebrick', 'darkorchid3'],
\       },
\       'vim': {
\           'parentheses': ['start=/(/ end=/)/', 'start=/\[/ end=/\]/', 'start=/{/ end=/}/ fold', 'start=/(/ end=/)/ containedin=vimFuncBody', 'start=/\[/ end=/\]/ containedin=vimFuncBody', 'start=/{/ end=/}/ fold containedin=vimFuncBody'],
\       },
\       'html': {
\           'parentheses': ['start=/\v\<((area|base|br|col|embed|hr|img|input|keygen|link|menuitem|meta|param|source|track|wbr)[ >])@!\z([-_:a-zA-Z0-9]+)(\s+[-_:a-zA-Z0-9]+(\=("[^"]*"|'."'".'[^'."'".']*'."'".'|[^ '."'".'"><=`]*))?)*\>/ end=#</\z1># fold'],
\       },
\       'css': 0,
\   }
\}

" use <tab> and <S-Tab> for trigger completion and navigate to the next complete item
function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~ '\s'
endfunction

inoremap <silent><expr> <Tab>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<Tab>" :
      \ coc#refresh()

inoremap <expr> <Tab> pumvisible() ? "\<C-n>" : "\<Tab>"
inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"
inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"

map <Leader>rs :Dispatch bundle exec rspec %
map <Leader>gd :GoDef<CR>
