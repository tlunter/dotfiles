" load the plugin and indent settings for the detected filetype
set nocompatible
filetype off

" First turn on Vundle
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

Plugin 'gmarik/Vundle.vim'
Plugin 'flazz/vim-colorschemes'
Plugin 'tpope/vim-markdown'
Plugin 'kien/ctrlp.vim'
Plugin 'Lokaltog/vim-easymotion'
Plugin 'groenewege/vim-less'
Plugin 'tpope/vim-rails.git'
Plugin 'tpope/vim-fugitive'
Plugin 'tpope/vim-unimpaired'
Plugin 'Valloric/YouCompleteMe'
Plugin 'scrooloose/syntastic'
Plugin 'bling/vim-airline'
Plugin 'tpope/vim-dispatch'
Plugin 'rking/ag.vim'
Plugin 'scrooloose/nerdtree'
Plugin 'mustache/vim-mustache-handlebars'
Plugin 'tpope/vim-surround'
Plugin 'pangloss/vim-javascript'
Plugin 'mxw/vim-jsx'
Plugin 'tacahiroy/ctrlp-funky'
Plugin 'ajh17/Spacegray.vim'
Plugin 'ekalinin/Dockerfile.vim'
Plugin 'Keithbsmiley/swift.vim'
Plugin 'janko-m/vim-test'
Plugin 'kbarrette/gutterballet'
Plugin 'wakatime/vim-wakatime'

call vundle#end()

" load the plugin and indent settings for the detected filetype
filetype plugin indent on
syntax on
set ruler
set showcmd
set showmode
set hidden

" Line numbering
set number

" Whitespace stuff
set nowrap
set autoindent
set smartindent
set smarttab
set tabstop=4
set shiftwidth=4
set softtabstop=4
set linespace=2
set expandtab
" 80 character highlighting
" let &colorcolumn=join(range(81,999),",")

" Undo stuff
set undodir=~/.vim/backup
set undofile

set noswapfile

" Searching
set hlsearch
set incsearch
set ignorecase
set smartcase

" YCM stuff
let g:ycm_add_preview_to_completeopt = 0
set completeopt-=preview
let g:ycm_path_to_python_interpreter = '/usr/bin/python'

" Use Vim's current working directory as the search root
let g:ctrlp_working_path_mode = 0
if executable('ag')
    " Use Ag over Grep
    set grepprg=ag\ --nogroup\ --nocolor

    " Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
    let g:ctrlp_user_command = 'ag %s -fl --nocolor -g ""'

    " ag is fast enough that CtrlP doesn't need to cache
    let g:ctrlp_use_caching = 0

    let g:agprg="ag --follow --nogroup --nocolor --column"
endif

" Open CtrlP for Buffers
nnoremap <C-L> :CtrlPBuffer<CR>

let g:ctrlp_extensions = ['funky']
nnoremap <C-F> :CtrlPFunky<Cr>

" Status bar
set laststatus=2
let g:airline_powerline_fonts = 1
let g:airline#extensions#tabline#enabled = 1
set noshowmode

" Color scheme
if has('gui_running')
    let os=substitute(system('uname'), '\n', '', '')
    if os == "Darwin"
        set guifont=Inconsolata-dz:h14
    else
        set guifont=DejaVu\ Sans\ Mono\ 14
    endif
else
    set t_Co=256
endif
set background=dark
colorscheme hojberg

" make uses real tabs
au FileType make set noexpandtab

" Thorfile, Rakefile, Vagrantfile and Gemfile are Ruby
au BufRead,BufNewFile {Gemfile,Rakefile,Vagrantfile,Thorfile,config.ru} set filetype=ruby

" add json syntax highlighting
au BufRead,BufNewFile *.json set filetype=javascript

" add haskell syntax highlighting
au BufRead,BufNewFile *.hsc  set filetype=haskell

" add zsh syntax highlighting
au BufRead,BufNewFile *.zsh* set filetype=zsh

" add racket syntax highlighting
au BufRead,BufNewFile *.rkt,*.rktl set filetype=racket
au FileType racket  set lisp
au FileType racket  set autoindent
au FileType racket  set lispwords+=public-method,override-method,private-method,syntax-case,syntax-rules
au FileType mkd     set wrap
au FileType mkd     setlocal nofoldenable

" make Python follow PEP8 ( http://www.python.org/dev/peps/pep-0008/ )
au FileType python  set softtabstop=4 tabstop=4 shiftwidth=4

" make HTML use 2 spaces
au BufRead,BufNewFile *.erb set filetype=html
au FileType html    set softtabstop=2 tabstop=2 shiftwidth=2

" make JS use 2 spaces
au FileType javascript set softtabstop=2 tabstop=2 shiftwidth=2

" make LESS use 2 spaces
au FileType less    set softtabstop=2 tabstop=2 shiftwidth=2

" make Ruby use 2 spaces
au FileType ruby    set softtabstop=2 tabstop=2 shiftwidth=2

au BufRead,BufNewFile *.yml.erb set filetype=yaml
au BufRead,BufNewFile *.sh.erb set filetype=sh
au BufNewFile,BufRead *.mod  set filetype=ampl
au BufNewFile,BufRead *.dat  set filetype=ampl
au BufNewFile,BufRead *.ampl set filetype=ampl


" allow backspacing over everything in insert mode
set backspace=indent,eol,start
" Copy from and paste to the system clipboard
set clipboard=unnamed

" Completion list
set wildmode=longest,list:longest
set wildmenu                "enable ctrl-n and ctrl-p to scroll thru matches
set wildignore=*.o,*.obj,*~ "stuff to ignore when tab completing
set wildignore+=*vim/backups*
set wildignore+=*sass-cache*
set wildignore+=*DS_Store*
set wildignore+=vendor/rails/**
set wildignore+=vendor/cache/**
set wildignore+=*.gem
set wildignore+=log/**
set wildignore+=tmp/**
set wildignore+=*.png,*.jpg,*.gif
set complete=.,b,u,]

" Don't like using shift or \
noremap ; :
let mapleader=','

" vimrc mappings
map <Leader>ve :e ~/.vimrc
map <Leader>rv :source ~/.vimrc

" EasyMotion over regular f/F
" map f <Leader><Leader>f
" map F <Leader><Leader>F

" A work around when vim isn't open with sudo
map <Leader>ws :w !sudo tee %

" Cancel highlighting by hitting enter
noremap <CR> :noh<CR><CR>

" No annoying noises
set noerrorbells visualbell t_vb=

" Enable mouse
set mouse=a

set encoding=utf8

" Scroll offset
set scrolloff=10

" Highlight extraneous whitespace
autocmd BufWinEnter * match Error /\s\+$/
autocmd InsertEnter * match Error /\s\+\%#\@<!$/
autocmd InsertLeave * match Error /\s\+$/
autocmd BufWinLeave * call clearmatches()

" Escape easier with jk
imap jk <Esc>

" Opens NerdTree
map <Leader>nt :NERDTreeToggle<CR>

" 256 colors with tmux
set term=screen-256color

" Markdown languages for fenced blocks
let g:markdown_fenced_languages = ['css', 'erb=eruby', 'javascript', 'js=javascript', 'json=javascript', 'ruby', 'sass', 'xml', 'html']

" Syntastic specific
let g:syntastic_swift_checkers = []
